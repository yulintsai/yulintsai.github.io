<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on RainForest Notes</title>
    <link>https://yulintsai.github.io/post/</link>
    <description>Recent content in Posts on RainForest Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 08 Oct 2020 12:00:02 +0000</lastBuildDate><atom:link href="https://yulintsai.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[Day 30] Oops！最終章 DevSecOps</title>
      <link>https://yulintsai.github.io/post/day-30/</link>
      <pubDate>Thu, 08 Oct 2020 12:00:02 +0000</pubDate>
      
      <guid>https://yulintsai.github.io/post/day-30/</guid>
      <description>讓我們來小小回顧一下，這些三十天的我們的Oops文章
Oops Gitea 系列  [Day 2] Oops！Gitea - 建置與安裝 [Day 3] Oops！Gitea - 備份與維護 [Day 4] Oops！Gitea - 超方便的功能及應用 [Day 5] Oops！Gitea - 防止git commit被偽造 [Day 6] Oops！Gitea - WebHook [Day 7] Oops！Gitea - Container log to ELK [Day 8] Oops！Gitea - 專案怎麼那麼肥！？  Oops Docker 系列  [Day 9] Oops！Docker - Image 瘦身大法  Oops Drone CI/CD 系列  [Day 10] Oops！Drone - 建置與安裝 [Day 11] Oops！Drone - 快速上手 [Day 12] Oops！Drone - 進階應用 [Day 13] Oops！Drone - Cron Jobs [Day 14] Oops！Drone - Pipelines Services [Day 27] Oops！CI/CD trigger WebHook to Telegram Bot  Oops Golang 系列  [Day 15] Oops！Golang - Linter [Day 16] Oops！Golang - CI/CD with Data Race Detector [Day 17] Oops！Golang - 讓我們來抓出吃資源的兇手！  Oops gRPC 系列  [Day 18] Oops！gRPC - 問題整理分享 [Day 19] Oops！gRPC - Protoc 容器化實作 [Day 20] Oops！gRPC - Auto Protoc Builder with Git Hooks  Oops Helm 系列  [Day 21] Oops！Helm - 起手式 [Day 22] Oops！Helm Template and Value [Day 23] Oops！Helm - 2 to 3 [Day 24] Oops！Helm - Can Not Upgrade Release [Day 25] Oops！Helm - 容器化實作 [Day 26] Oops！GitOps with Helm  Oops OpsDev 實作  [Day 28] Oops！Golang - Google Cloud Status Monitor with Telegram  Oops DevOps  [Day 29] Oops！Block DevOps  Oops DevSecOps 最後一天來講 DevSecOps or SecDevOps的一些概念，當在開發或維運的時候都是非常需要重視資訊安全。 可以利用CI/CD工具來幫助你們整個DevOps上更加安全。</description>
    </item>
    
    <item>
      <title>[Day 29] Oops！Block DevOps</title>
      <link>https://yulintsai.github.io/post/day-29/</link>
      <pubDate>Wed, 07 Oct 2020 10:08:03 +0000</pubDate>
      
      <guid>https://yulintsai.github.io/post/day-29/</guid>
      <description>How to BLOCK DevOps？ 要如何阻礙DevOps？ DevOps是一種文化，那就只要讓該文化導向毀滅之路就可以了。 以下介紹四點可能可以BLOCK DevOps的方式</description>
    </item>
    
    <item>
      <title>[Day 28] Oops！Golang - Google Cloud Status Monitor with Telegram</title>
      <link>https://yulintsai.github.io/post/day-28/</link>
      <pubDate>Tue, 06 Oct 2020 10:35:03 +0000</pubDate>
      
      <guid>https://yulintsai.github.io/post/day-28/</guid>
      <description>Oops 出於Ops的原因開發去 之前就有遇過當Google Cloud 有發生狀況而我們使用者都不知道的情況。 所以想透過在本機or其他業者的VM來監控Google Cloud Status，避免Google整個掛掉後，沒任何通知。</description>
    </item>
    
    <item>
      <title>[Day 26] Oops！GitOps with Helm</title>
      <link>https://yulintsai.github.io/post/day-26/</link>
      <pubDate>Sun, 04 Oct 2020 13:31:36 +0000</pubDate>
      
      <guid>https://yulintsai.github.io/post/day-26/</guid>
      <description>What is GitOps?  GitOps is a way to do Kubernetes cluster management and application delivery.</description>
    </item>
    
    <item>
      <title>[Day 25] Oops！Helm - 容器化實作</title>
      <link>https://yulintsai.github.io/post/day-25/</link>
      <pubDate>Sat, 03 Oct 2020 09:28:38 +0000</pubDate>
      
      <guid>https://yulintsai.github.io/post/day-25/</guid>
      <description>想容器化的原因 想要容器化原因跟[Day 19] Oops！gRPC - Protoc 容器化實作的原因一樣，主要是想幫同伴們減去安裝的成本，以及之後在CI/CD的時候可以直接透過build好的image操作，避免使用helm時遇到的版本差異問題。
先建立映像檔 需要的套件：gcloud + helm3 helm3.</description>
    </item>
    
    <item>
      <title>[Day 24] Oops！Helm - Can Not Upgrade Release</title>
      <link>https://yulintsai.github.io/post/day-24/</link>
      <pubDate>Fri, 02 Oct 2020 11:30:56 +0000</pubDate>
      
      <guid>https://yulintsai.github.io/post/day-24/</guid>
      <description>Oops 希望大家都不要遇到 Helm 2 -&amp;gt; Helm 3 後 突然無法Upgrade Release</description>
    </item>
    
    <item>
      <title>[Day 23] Oops！Helm - 2 to 3</title>
      <link>https://yulintsai.github.io/post/day-23/</link>
      <pubDate>Thu, 01 Oct 2020 11:22:54 +0000</pubDate>
      
      <guid>https://yulintsai.github.io/post/day-23/</guid>
      <description>Helm 2 vs Helm 3 重點更新
 Tiller移除 Chart的apiVersion更新為&amp;quot;v2&amp;quot;，目前還是能兼容&amp;quot;v1&amp;quot;版本。 不再需要初始化Helm(helm init)  為什麼要換helm 3？ 因為從[Day 21] Oops！Helm - 起手式來看與k8s版本比對表，會發現helm2越來越跟不上k8s最新版本，遲早要淘汰掉helm 2，加上helm 3已經發佈一段時間了，不如早點換上helm 3。</description>
    </item>
    
    <item>
      <title>[Day 22] Oops！Helm Template and Value</title>
      <link>https://yulintsai.github.io/post/day-22/</link>
      <pubDate>Wed, 30 Sep 2020 10:07:46 +0000</pubDate>
      
      <guid>https://yulintsai.github.io/post/day-22/</guid>
      <description>Helm的是Template + Value的組合部署檔，去k8s進行部署的 常見 Oops 分享 使用數字會噴錯  template匯入value的錯誤</description>
    </item>
    
    <item>
      <title>[Day 21] Oops！Helm - 起手式</title>
      <link>https://yulintsai.github.io/post/day-21/</link>
      <pubDate>Tue, 29 Sep 2020 12:09:13 +0000</pubDate>
      
      <guid>https://yulintsai.github.io/post/day-21/</guid>
      <description>介紹  The package manager for Kubernetes
 身為一個 yaml工程師在Kubernetes的世界內，helm可以為我減輕大量維護yaml的負擔。</description>
    </item>
    
    <item>
      <title>[Day 20] Oops！gRPC - Auto Protoc Builder with Git Hooks</title>
      <link>https://yulintsai.github.io/post/day-20/</link>
      <pubDate>Mon, 28 Sep 2020 09:36:00 +0000</pubDate>
      
      <guid>https://yulintsai.github.io/post/day-20/</guid>
      <description>Git Hooks 在git也有跟webhook類似的強大功能Git Hooks，是在git action觸發的同時去進行一些腳本。
git hooks 列表    Hook 名稱 觸發指令     applypatch-msg git am   pre-applypatch git am   post-applypatch git am   pre-commit git commit   prepare-commit-msg git commit   post-commit git commit   post-checkout git checkout and git clone   post-merge git merge or git pull   pre-push git push   pre-receive git-receive-pack on the remote repo   update git-receive-pack on the remote repo   post-update git-receive-pack on the remote repo   post-rewrite git commit &amp;ndash;amend, git-rebase    實作 Auto Protoc Builder 在commit之前觸發上自動幫你透過builder製作proto檔案，並自動git add build完成的files。</description>
    </item>
    
    <item>
      <title>[Day 19] Oops！gRPC - Protoc 容器化實作</title>
      <link>https://yulintsai.github.io/post/day-19/</link>
      <pubDate>Sun, 27 Sep 2020 12:00:58 +0000</pubDate>
      
      <guid>https://yulintsai.github.io/post/day-19/</guid>
      <description>Oops 安裝 gRPC Protoc好麻煩！ 相信每個人在裝gRPC Protoc，可能都要花一些時間，還可能要處理一些環境問題，那就讓我們就把他封裝成容易讓大家用docker run起來build就好了！
目的 Builder: 做一個image可以直接透過docker啟動container去幫你build proto檔案，使用者就不用再安裝proto+gprc了，只需要有裝docker就可以build proto檔案。</description>
    </item>
    
    <item>
      <title>[Day 18] Oops！gRPC - 問題整理分享</title>
      <link>https://yulintsai.github.io/post/day-18/</link>
      <pubDate>Sat, 26 Sep 2020 11:19:59 +0000</pubDate>
      
      <guid>https://yulintsai.github.io/post/day-18/</guid>
      <description>1. 接口參數異動 +- gRPC proto 參數 「移除」 Client + Server - Client +</description>
    </item>
    
    <item>
      <title>[Day 17] Oops！Golang - 讓我們來抓出吃資源的兇手！</title>
      <link>https://yulintsai.github.io/post/day-17/</link>
      <pubDate>Fri, 25 Sep 2020 10:02:25 +0000</pubDate>
      
      <guid>https://yulintsai.github.io/post/day-17/</guid>
      <description>是否有看過資源使用數據圖沒有降下來的情況？ 是否有遇過機器資源突然吃光的情況? 看code看不出原因的話！這時候就要需要進行效能分析了 說到效能分析就會想到 pprof 本篇文章，先帶大家使用一下golang的pprof套件 https://golang.org/pkg/net/http/pprof/
檢測功能主要有   cpu: cpu profile 是在哪邊花費CPU的時間。</description>
    </item>
    
    <item>
      <title>[Day 16] Oops！Golang - CI/CD with Data Race Detector</title>
      <link>https://yulintsai.github.io/post/day-16/</link>
      <pubDate>Thu, 24 Sep 2020 11:26:43 +0000</pubDate>
      
      <guid>https://yulintsai.github.io/post/day-16/</guid>
      <description>Data Race 是個非常難找的錯誤類型之一
 Data races are among the most common and hardest to debug types of bugs in concurrent systems.</description>
    </item>
    
    <item>
      <title>[Day 15] Oops！Golang - Linter</title>
      <link>https://yulintsai.github.io/post/day-15/</link>
      <pubDate>Wed, 23 Sep 2020 08:49:33 +0000</pubDate>
      
      <guid>https://yulintsai.github.io/post/day-15/</guid>
      <description>golangci-lint 是個針對Go語言多個Linters組合而成的Linter，是Linters的大集合。 導入linter在CI流程內，已成為常態，至少會警示你的code可能會遭遇哪些問題，安全性是否有疑慮等問題。
著名使用者們 以下著名的公司也有使用golangci-lint
 AWS Facebook Google Netflix Arduino Baidu Eclipse Foundation IBM Istio Percona Red Hat OpenShift Samsung Serverless ScyllaDB SoundCloud The New York Times WooCart Xiaomi Yahoo  在github查詢也有上萬個收尋結果唷！</description>
    </item>
    
    <item>
      <title>[Day 14] Oops！Drone - Pipelines Services</title>
      <link>https://yulintsai.github.io/post/day-14/</link>
      <pubDate>Tue, 22 Sep 2020 09:54:30 +0000</pubDate>
      
      <guid>https://yulintsai.github.io/post/day-14/</guid>
      <description>在Pipelines需要使用DB或其他服務時怎麼辦？ 在CI/CD的流程中跑testing是很重要的，但有些test case需要使用DB或其他服務時就可以用Drone Pipelines Service設定把你需要的服務掛進來，例如:redis, mysql, nsq, cassandra or scylla &amp;hellip;。 只要相關服務支援使用image讓docker啟動，就能在Pipelines單獨起服務來使用唷！是不是非常非常方便～</description>
    </item>
    
    <item>
      <title>[Day 13] Oops！Drone - Cron Jobs</title>
      <link>https://yulintsai.github.io/post/day-13/</link>
      <pubDate>Mon, 21 Sep 2020 12:15:30 +0000</pubDate>
      
      <guid>https://yulintsai.github.io/post/day-13/</guid>
      <description>今天來介紹Drone的排程設定功能及應用 有三個方法可以設定排程
 From Drone Server UI From Drone CLI From Drone API  此篇主要用 From Drone Server UI &amp;amp; From Drone CLI 兩種方式設定來介紹</description>
    </item>
    
    <item>
      <title>[Day 12] Oops！Drone - 進階應用</title>
      <link>https://yulintsai.github.io/post/day-12/</link>
      <pubDate>Sun, 20 Sep 2020 00:08:59 +0000</pubDate>
      
      <guid>https://yulintsai.github.io/post/day-12/</guid>
      <description>大家早安 相信大家看完昨日的 [Day 11] Oops！Drone - 快速上手 ，並且練習完昨天的題目後，已經奠定了一些基礎，那麼我們今天來進階練習ㄧ下～ 這些練習或許在未來的某一天，你們可以在某個地方應用的到！</description>
    </item>
    
    <item>
      <title>[Day 11] Oops！Drone - 快速上手</title>
      <link>https://yulintsai.github.io/post/day-11/</link>
      <pubDate>Sat, 19 Sep 2020 00:46:43 +0000</pubDate>
      
      <guid>https://yulintsai.github.io/post/day-11/</guid>
      <description>想要讓Drone設定的好，就要把基礎先打好！ 認識設定值   kind - 定義對象屬性的類別 目前有</description>
    </item>
    
    <item>
      <title>[Day 10] Oops！Drone - 建置與安裝</title>
      <link>https://yulintsai.github.io/post/day-10/</link>
      <pubDate>Fri, 18 Sep 2020 11:22:31 +0000</pubDate>
      
      <guid>https://yulintsai.github.io/post/day-10/</guid>
      <description>VM建置 (GCP)  如果要單獨一台VM，開來跑drone的朋友們看過來！ 在VM的規格，挑選上因為Drone會比較耗CPU 所以我推薦使用c2的CPU
使用drone build image比較</description>
    </item>
    
    <item>
      <title>[Day 27] Oops！CI/CD trigger WebHook to Telegram Bot</title>
      <link>https://yulintsai.github.io/post/day-27/</link>
      <pubDate>Fri, 18 Sep 2020 11:22:31 +0000</pubDate>
      
      <guid>https://yulintsai.github.io/post/day-27/</guid>
      <description>前言 有時候我們在CI/CD流程進行中時，通常都是被動告知的，那如果想要透過Pipeline主動告知要怎麼做呢？ 我們在第六天[Day 6] Oops！Gitea - WebHook有介紹到Gitea搭配WebHook的做法，而如果要在CI/CD上觸發WebHook去通知Telegram要怎麼做呢？
Telegram Bot API 首先讓我們來瞧瞧Telegram Bot API，Telegram Bot提供API可以直接打Telegram Bot API發送訊息到指定的聊天室</description>
    </item>
    
    <item>
      <title>[Day 9] Oops！Docker - Image 瘦身大法</title>
      <link>https://yulintsai.github.io/post/day-9/</link>
      <pubDate>Thu, 17 Sep 2020 14:46:11 +0000</pubDate>
      
      <guid>https://yulintsai.github.io/post/day-9/</guid>
      <description>今天為大家來簡單介紹Docker在17.05版本後，才支援的新功能。 Docker - Multiple Stage Builds 簡易說明：此功能可以同時操作多個Dockerfiles的行為，使得在build image上方便了許多 需求版本: Docker 17.</description>
    </item>
    
    <item>
      <title>[Day 8] Oops！Gitea - 專案怎麼那麼肥！？</title>
      <link>https://yulintsai.github.io/post/day-8/</link>
      <pubDate>Wed, 16 Sep 2020 09:43:32 +0000</pubDate>
      
      <guid>https://yulintsai.github.io/post/day-8/</guid>
      <description>Oops 在跑CI/CD時，有遇過在 git clone step時非常之那麼久(超過1分鐘以上)！  先打開gitea進入此專案主頁 請大家注意到此專案的Size！</description>
    </item>
    
    <item>
      <title>[Day 7] Oops！Gitea - Container log to ELK</title>
      <link>https://yulintsai.github.io/post/day-7/</link>
      <pubDate>Tue, 15 Sep 2020 09:20:02 +0000</pubDate>
      
      <guid>https://yulintsai.github.io/post/day-7/</guid>
      <description>Q:要將gitea上面的Log輸出到ELK上做查詢分析要怎麼做呢？  由於我們裝gitea的方式是使用docker安裝的，那麼我們只需要透過Filebeat來幫我們將Log輸出到Elasticsearch 就好囉！
 Filebeat Filebeat是用於轉發和集中日誌數據的輕量級傳送程序。作為服務器上的代理安裝，Filebeat監視您指定的日誌文件或位置，收集日誌事件，並將它們轉發到Elasticsearch或 Logstash進行索引。</description>
    </item>
    
    <item>
      <title>[Day 6] Oops！Gitea - WebHook</title>
      <link>https://yulintsai.github.io/post/day-6/</link>
      <pubDate>Mon, 14 Sep 2020 09:37:54 +0000</pubDate>
      
      <guid>https://yulintsai.github.io/post/day-6/</guid>
      <description>WebHook也算是在CI/CD也算是重要的環節之一，今日來帶大家如何讓Gitea觸發WebHook。
首先，WebHook是什麼？
 網頁開發中的Webhook（Webhook）是一種通過自訂回呼函式來增加或更改網頁表現的方法。這些回呼可被可能與原始網站或應用相關的第三方用戶及開發者儲存、修改與管理。術語「Webhook」由傑夫·林德塞（Jeff Lindsay）於2007年通過給電腦編程術語「掛鉤」（Hook）加上字首得來。 - Wiki
 那麼用我的方式來說明的話，就是網站間的連動行為。</description>
    </item>
    
    <item>
      <title>[Day 5] Oops！Gitea - 防止git commit被偽造</title>
      <link>https://yulintsai.github.io/post/day-5/</link>
      <pubDate>Sun, 13 Sep 2020 12:00:32 +0000</pubDate>
      
      <guid>https://yulintsai.github.io/post/day-5/</guid>
      <description>在Gitea上使用GPG簽署 [Mac] 今天來教大家在gitea推commit上去時，防止git commit被偽造。
為什麼會需要使用GPG簽署commit 在自己git的名字跟信箱都被公開的情況下，每個人的commit都可能被偽造。 要如何保證這些commit是由你的電腦下的呢？
GPG(GNU Privacy Guard)也可以說是GnuPG，是一個加密工具，通常用來驗證身份 現在我們就要來將 git commit 加上 GPG 簽署，讓它 Push 到 Github 等代管平台後，別人可以確定這份 Commit 是你提交的 主要目的是避免git commit 被別人偽造 Homebrew 安裝  如果系統是 MacOS 的人，且有裝 Homebrew 就可以直接用它來安裝，套件名稱為 gnupg brew install gnupg 其他的OS或是沒有 Homebrew 的，可以直接到官方網站下載安裝檔。 官方網站載點</description>
    </item>
    
    <item>
      <title>[Day 4] Oops！Gitea - 超方便的功能及應用</title>
      <link>https://yulintsai.github.io/post/day-4/</link>
      <pubDate>Sat, 12 Sep 2020 11:11:19 +0000</pubDate>
      
      <guid>https://yulintsai.github.io/post/day-4/</guid>
      <description>超方便的功能 - 程式碼搜尋器 (預設是被關閉的) 預設關閉的原因是：
 Enables code search (uses a lot of disk space, about 6 times more than the repository size).</description>
    </item>
    
    <item>
      <title>[Day 3] Oops！Gitea - 備份與維護</title>
      <link>https://yulintsai.github.io/post/day-3/</link>
      <pubDate>Fri, 11 Sep 2020 10:18:46 +0000</pubDate>
      
      <guid>https://yulintsai.github.io/post/day-3/</guid>
      <description>大家早安，今天要談的是gitea的備份與維護 備份  由於上篇我們把gitea安裝在GCP VM上，所以這篇主要是從GCP VM上的角度來看待備份與維護的事項唷！ 備份的策略，每個團隊都有些不同，沒有一定要怎麼做，需要團隊成員的討論。 本人是使用GCP上的快照功能進行備份，請至快照設定介面請點擊 建立快照排程，為了不影響同事使用gitea，盡可能設定在同事沒上班的時間進行快照。 快照週期&amp;amp;保留日期設定，可以與同事們討論後設定，這些參數會影響到，若真的要從快照恢復的話，大家都能接受的時間點。</description>
    </item>
    
    <item>
      <title>[Day 2] Oops！Gitea - 建置與安裝</title>
      <link>https://yulintsai.github.io/post/day-2/</link>
      <pubDate>Thu, 10 Sep 2020 09:39:47 +0000</pubDate>
      
      <guid>https://yulintsai.github.io/post/day-2/</guid>
      <description>在我們團隊中，一切DevOps的運作的起點就是從GitOps開始，相信大家都有在使用好用的github，另外想要私有專案、公司內及個人使用的前提來挑選git服務，我選擇了gitea，主要是個人偏愛Go語言，還有安裝及升級比其他服務來得容易許多。 另外gitea的開源專案也持續在維護及更新。 gitea對於其他Git託管服務的比較圖
那麼我們就開始來玩Gitea吧 !
VM建置 (GCP)  首先要考量的是VM的配置，當然配置上也要考慮到之後的維護。 以下是官方的說明</description>
    </item>
    
    <item>
      <title>[Day 1] Oops！前言</title>
      <link>https://yulintsai.github.io/post/day-1/</link>
      <pubDate>Wed, 09 Sep 2020 08:22:46 +0000</pubDate>
      
      <guid>https://yulintsai.github.io/post/day-1/</guid>
      <description>大家好，我是Rainforest，初次參與鐵人賽，而參賽主要目的是想跟大家分享DevOps的經驗，在每篇文章內，我會盡量把遇過會覺得Oops的事情分享在下方給各位大大們，希望大家遠離這些Oops！避免踩雷！當中有些做法是自己想的如有更棒的做法，也歡迎共襄盛舉一起來討論。謝謝！! 接下來我列出幾個未來30天內我會講的主題 Gitea  Gitea 是一個可自行託管的 Git 服務。你可以拿 GitHub、Bitbucket 或 Gitlab 來比較看看。 https://docs.</description>
    </item>
    
  </channel>
</rss>
